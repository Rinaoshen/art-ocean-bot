import os
import json
import logging
from telegram import Bot
from telegram.ext import Application, CommandHandler
from bot.opportunity import Opportunity
from parsers.artconnect import parse_artconnect

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ArtOceanBot:
    def __init__(self, telegram_token: str):
        self.bot = Bot(token=telegram_token)
        self.application = Application.builder().token(telegram_token).build()
        self.subscribers = set()
        self.seen_opportunities = set()
        self.load_data()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        self.application.add_handler(CommandHandler("status", self.status_command))

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open('data/subscribers.json', 'r') as f:
                self.subscribers = set(json.load(f))
        except FileNotFoundError:
            self.subscribers = set()

        try:
            with open('data/seen_opportunities.json', 'r') as f:
                self.seen_opportunities = set(json.load(f))
        except FileNotFoundError:
            self.seen_opportunities = set()

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs("data", exist_ok=True)
        with open('data/subscribers.json', 'w') as f:
            json.dump(list(self.subscribers), f)

        with open('data/seen_opportunities.json', 'w') as f:
            json.dump(list(self.seen_opportunities), f)

    async def start_command(self, update, context):
        welcome_text = """
üé®üåä **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Art Ocean Bot!**

–Ø –Ω–∞—Ö–æ–∂—É –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä—Ç-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ üí∞ –ì—Ä–∞–Ω—Ç—ã
‚Ä¢ üè† –†–µ–∑–∏–¥–µ–Ω—Ü–∏–∏  
‚Ä¢ üì¢ Open Call'—ã
‚Ä¢ üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã
‚Ä¢ üé® –í—ã—Å—Ç–∞–≤–∫–∏

üì¨ –ù–∞–∂–º–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –ø–µ—Ä–≤—ã–º–∏!
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def help_command(self, update, context):
        help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ Art Ocean Bot**

/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É  
/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è  
/status ‚Äî –≤–∞—à —Å—Ç–∞—Ç—É—Å  
/start ‚Äî –Ω–∞—á–∞—Ç—å  
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞

–Ø –ø—Ä–∏—Å—ã–ª–∞—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def subscribe_command(self, update, context):
        user_id = update.effective_user.id
        self.subscribers.add(user_id)
        self.save_data()
        await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", parse_mode='Markdown')

    async def unsubscribe_command(self, update, context):
        user_id = update.effective_user.id
        self.subscribers.discard(user_id)
        self.save_data()
        await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã.", parse_mode='Markdown')

    async def status_command(self, update, context):
        user_id = update.effective_user.id
        status = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω" if user_id in self.subscribers else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        total = len(self.subscribers)
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total}\nüîç –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(self.seen_opportunities)}",
            parse_mode='Markdown'
        )

    async def send_new_opportunities(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        opportunities = await parse_artconnect()
        new_opps = [opp for opp in opportunities if opp.url not in self.seen_opportunities]

        for opp in new_opps:
            message = opp.to_telegram_message()
            for user_id in self.subscribers:
                try:
                    await self.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            self.seen_opportunities.add(opp.url)

        if new_opps:
            self.save_data()
