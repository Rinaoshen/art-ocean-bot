import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from .subscribers import load_subscribers, save_subscribers
from .opportunity import Opportunity
from .scraper import parse_example_site, hash_opportunity
import asyncio

logger = logging.getLogger(__name__)

class ArtOceanBot:
    def __init__(self, telegram_token: str):
        self.bot = Bot(token=telegram_token)
        self.application = Application.builder().token(telegram_token).build()
        self.subscribers = load_subscribers()
        self.seen_opportunities = set()

        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        self.application.add_handler(CommandHandler("status", self.status_command))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "üé®üåä **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Art Ocean Bot!**\n\n"
            "–Ø –æ–∫–µ–∞–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä—é —Å–∞–π—Ç—ã –∏ –Ω–∞—Ö–æ–∂—É –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ üí∞ –ì—Ä–∞–Ω—Ç—ã\n‚Ä¢ üè† –ê—Ä—Ç-—Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏\n‚Ä¢ üì¢ Open Call'—ã\n‚Ä¢ üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã\n‚Ä¢ üé® –í—ã—Å—Ç–∞–≤–∫–∏\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/help - –ø–æ–º–æ—â—å\n\n"
            "üåä –ù–∞–∂–º–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –æ–∫–µ–∞–Ω –∞—Ä—Ç-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!"
        )
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "ü§ñüåä **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Art Ocean Bot**\n\n"
            "**–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—é 15+ —Å–∞–π—Ç–æ–≤ —Å –∞—Ä—Ç-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä—É—é –¥—É–±–ª–∏–∫–∞—Ç—ã\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞—é 24/7 –∫–∞–∫ –æ–∫–µ–∞–Ω—Å–∫–∏–µ –≤–æ–ª–Ω—ã\n\n"
            "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
            "‚Ä¢ ArtConnect, ArtRabbit, ArtForum\n"
            "‚Ä¢ e-flux, Artist-Opportunities.org\n"
            "‚Ä¢ –ö—Ä—É–ø–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ (Tate, Gagosian, etc.)\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
            "/status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "üåä –û–∫–µ–∞–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∂–¥–µ—Ç –≤–∞—Å!"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        self.subscribers.add(user_id)
        save_subscribers(self.subscribers)
        await update.message.reply_text(
            "‚úÖüåä –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ Art Ocean Bot!\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –≤—Å–µ –Ω–æ–≤—ã–µ –∞—Ä—Ç-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –æ–∫–µ–∞–Ω–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
            parse_mode='Markdown'
        )

    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        self.subscribers.discard(user_id)
        save_subscribers(self.subscribers)
        await update.message.reply_text(
            "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        is_subscribed = user_id in self.subscribers
        status = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω" if is_subscribed else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        total_subscribers = len(self.subscribers)
        await update.message.reply_text(
            f"üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {status}\n"
            f"üë• **–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** {total_subscribers}\n"
            f"üîç **–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:** {len(self.seen_opportunities)}",
            parse_mode='Markdown'
        )

    async def send_new_opportunities(self):
        opportunities = await parse_example_site()
        new_opps = []
        for opp in opportunities:
            opp_hash = hash_opportunity(opp)
            if opp_hash not in self.seen_opportunities:
                self.seen_opportunities.add(opp_hash)
                new_opps.append(opp)

        for opp in new_opps:
            message = opp.to_telegram_message()
            for user_id in self.subscribers:
                try:
                    await self.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown', disable_web_page_preview=False)
                except Exception as e:
                    logger.error(f"Failed to send message to {user_id}: {e}")

    async def periodic_check(self, interval_seconds=3600):
        while True:
            logger.info("Checking for new opportunities...")
            await self.send_new_opportunities()
            await asyncio.sleep(interval_seconds)
